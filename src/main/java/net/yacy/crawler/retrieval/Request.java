// Request.java
// (C) 2007 by Michael Peter Christen; mc@yacy.net, Frankfurt a. M., Germany
// first published 14.03.2007 on http://yacy.net
//
// This is a part of YaCy, a peer-to-peer based web search engine
//
// $LastChangedDate$
// $LastChangedRevision$
// $LastChangedBy$
//
// LICENSE
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

package net.yacy.crawler.retrieval;

import java.util.Date;

import net.yacy.grid.tools.MultiProtocolURL;

public class Request {

    private byte[] initiator; // the initiator hash, is NULL or "" if it is the own proxy;
                              // if this is generated by a crawl, the own peer hash in entered
    private MultiProtocolURL referrerurl ; // the url's referrer url
    private MultiProtocolURL url; // the url as string
    private String name; // the name of the url, from anchor tag <a>name</a>
    private long appdate; // the time when the url was first time appeared.
    private int depth; // the prefetch depth so far, starts at 0
    private String statusMessage;
    private int initialHash; // to provide a object hash that does not change even if the url changes because of redirection
    private int status;
    
    public Request() {
        // used only to create poison entries
        this.initiator = null;
        this.url = null;
        this.referrerurl = null;
        this.name = null;
        this.appdate = 0;
        this.depth = 0;
        this.statusMessage = null;
        this.initialHash = 0;
        this.status = 0;
    }
    
    /**
     * convenience method for 'full' request object
     *
     * @param url
     * @param referrerhash
     */
    public Request(final MultiProtocolURL url, final MultiProtocolURL referrerurl) {
        this(null, url, referrerurl, null, null, 0);
    }

    /**
     * A Request Entry is a object that is created to provide all information to load a specific resource.
     *
     * @param initiator the hash of the initiator peer
     * @param url the {@link URL} to crawl
     * @param referrer the hash of the referrer URL
     * @param name the name of the document to crawl
     * @param appdate the time when the url was first time appeared
     * @param profileHandle the name of the prefetch profile. This must not be null!
     * @param depth the crawling depth of the entry
     */
    public Request(
        final byte[] initiator,
        final MultiProtocolURL url,
        final MultiProtocolURL referrerurl,
        final String name,
        final Date appdate,
        final int depth) {
        // create new entry and store it into database
        assert url != null;
        url.removeRef(); // remove anchor reference
        this.initiator = (initiator == null) ? null : ((initiator.length == 0) ? null : initiator);
        this.url = url;
        this.referrerurl = referrerurl;
        this.name = (name == null) ? "" : name;
        this.appdate = (appdate == null) ? 0 : appdate.getTime();
        this.depth = depth;
        this.statusMessage = "loaded(args)";
        this.initialHash = url.hashCode();
        this.status = 0;
    }

    @Override
    public int hashCode() {
        // overloads Object.hashCode()
        return this.initialHash;
    }

    public void setStatus(final String s, final int code) {
        //System.out.println("***DEBUG*** crawler status " + s + ", " + code + " for " + this.url.toNormalform(true, false));
        this.statusMessage = s;
        this.status = code;
    }
    
    public int getStatus() {
        return this.status;
    }

    public String getStatusMessage() {
        return this.statusMessage;
    }

    public MultiProtocolURL url() {
        // the url
        return this.url;
    }

    public void redirectURL(final MultiProtocolURL redirectedURL) {
        // replace old URL by new one. This should only be used in case of url redirection
        this.url = redirectedURL;
    }

    public MultiProtocolURL referrerurl() {
        // the urlhash of a referer url
        return this.referrerurl;
    }

    public byte[] initiator() {
        // returns the hash of the initiating peer
        return this.initiator;
    }

    public boolean proxy() {
        // true when the url was retrieved using the proxy
        return (initiator() == null || initiator().length == 0);
    }

    public Date appdate() {
        // the date when the url appeared first
        return new Date(this.appdate);
    }
    
    public String name() {
        // return the anchor name (text inside <a> tag)
        return this.name;
    }

    public int depth() {
        // crawl depth where the url appeared
        return this.depth;
    }

    @Override
    public String toString() {
        return this.url.toNormalform(true);
    }
}